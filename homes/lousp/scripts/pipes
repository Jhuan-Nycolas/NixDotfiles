VERSION=1.3.0

M=32768
p=1
f=75
s=13
r=2000
t=0
w=80
h=24

sets=(
    "┃┏ ┓┛━┓  ┗┃┛┗ ┏━"
    "│╭ ╮╯─╮  ╰│╯╰ ╭─"
    "│┌ ┐┘─┐  └│┘└ ┌─"
    "║╔ ╗╝═╗  ╚║╝╚ ╔═"
    "|+ ++-+  +|++ +-"
    "|/ \/-\  \|/\ /-"
    ".. ....  .... .."
    ".o oo.o  o.oo o."
    "-\ /\|/  /-\/ \|"
    "╿┍ ┑┚╼┒  ┕╽┙┖ ┎╾"
)
SETS=()

x=()
y=()
l=()

n=()
v=()
c=()

V=()
C=()
VN=0
CN=0
E=()

RNDSTART=0
BOLD=1
NOCOLOR=0
KEEPCT=0

print_help() {
    local cgap
    printf -v cgap '%*s' $((15 - ${#COLORS})) ''
    cat <<HELP
Usage: $(basename $0) [OPTION]...
Animated pipes terminal screensaver.

  -p [1-]               number of pipes (D=1)
  -t [0-$((${#sets[@]} - 1))]              pipe type (D=0)
  -t c[16 chars]        custom pipe type
  -c [0-$COLORS]${cgap}pipe color INDEX (TERM=$TERM), can be
                        hexadecimal with '#' prefix
                        (D=-c 1 -c 2 ... -c 7 -c 0)
  -f [20-100]           framerate (D=75)
  -s [5-15]             going straight probability, 1 in (D=13)
  -r [0-]               reset after (D=2000) characters, 0 if no reset
  -R                    randomize starting position and direction
  -B                    no bold effect
  -C                    no color
  -K                    keep pipe color and type when crossing edges
  -h                    print this help message
  -v                    print version number

Note: -t and -c can be used more than once.
HELP
}

parse() {
    is_N() {
        [[ -n $1 && -z ${1//[0-9]} ]]
    }

    is_hex() {
        [[ -n $1 && -z ${1//[0-9A-Fa-f]} ]]
    }

    pearg() {
        printf "%s: -$arg invalid argument -- $OPTARG; %s\n" "$0" "$*" >&2
    }

    OPTIND=1
    while getopts "p:t:c:f:s:r:RBCKhv" arg; do
    case $arg in
        p)
            if is_N "$OPTARG" && ((OPTARG > 0)); then
                p=$OPTARG
            else
                pearg 'must be an integer and greater than 0'
                return 1
            fi
            ;;
        t)
            if [[ "$OPTARG" = c???????????????? ]]; then
                V+=(${#sets[@]})
                sets+=("${OPTARG:1}")
            elif is_N "$OPTARG" && ((OPTARG < ${#sets[@]})); then
                V+=($OPTARG)
            else
                pearg 'must be an integer and from 0 to' \
                      "$((${#sets[@]} - 1)); or a custom type"
                return 1
            fi
            ;;
        c)
            if [[ $OPTARG == '#'* ]]; then
                if ! is_hex "${OPTARG:1}"; then
                    pearg 'unrecognized hexadecimal string'
                    return 1
                fi
                if ((16$OPTARG >= COLORS)); then
                    pearg 'hexadecimal must be from #0 to' \
                          "#$(printf '%X' $((COLORS - 1)))"
                    return 1
                fi
                C+=($((16$OPTARG)))
            elif is_N "$OPTARG" && ((OPTARG < COLORS)); then
                C+=($OPTARG)
            else
                pearg "must be an integer and from 0 to $((COLORS - 1));" \
                      'or a hexadecimal string with # prefix'
                return 1
            fi
            ;;
        f)
            if is_N "$OPTARG" && ((OPTARG >= 20 && OPTARG <= 100)); then
                f=$OPTARG
            else
                pearg 'must be an integer and from 20 to 100'
                return 1
            fi
            ;;
        s)
            if is_N "$OPTARG" && ((OPTARG >= 5 && OPTARG <= 15)); then
                s=$OPTARG
            else
                pearg 'must be an integer and from 5 to 15'
                return 1
            fi
            ;;
        r)
            if is_N "$OPTARG"; then
                r=$OPTARG
            else
                pearg 'must be a non-negative integer'
                return 1
            fi
            ;;
        R) RNDSTART=1;;
        B) BOLD=0;;
        C) NOCOLOR=1;;
        K) KEEPCT=1;;
        h)
            print_help
            exit 0
            ;;
        v) echo "$(basename -- "$0") $VERSION"
            exit 0
            ;;
        *)
            return 1
        esac
    done

    shift $((OPTIND - 1))
    if (($#)); then
        printf "$0: illegal arguments -- $*; no arguments allowed\n" >&2
        return 1
    fi
}

cleanup() {
    read -t 0.001 && cat </dev/stdin>/dev/null

    tput reset
    tput rmcup
    tput cnorm
    stty echo
    printf "$SGR0"
    exit 0
}

resize() {
    w=$(tput cols) h=$(tput lines)
}

init_pipes() {
    local i

    ci=$((KEEPCT ? 0 : CN * RANDOM / M))
    vi=$((KEEPCT ? 0 : VN * RANDOM / M))
    for ((i = 0; i < p; i++)); do
        ((
            n[i] = 0,
            l[i] = RNDSTART ? RANDOM % 4 : 0,
            x[i] = RNDSTART ? w * RANDOM / M : w / 2,
            y[i] = RNDSTART ? h * RANDOM / M : h / 2,
            v[i] = V[vi]
        ))
        c[i]=${E[ci]}
        ((ci = (ci + 1) % CN, vi = (vi + 1) % VN))
    done
}

init_screen() {
    stty -echo
    tput smcup
    tput civis
    tput clear
    trap cleanup HUP TERM

    resize
    trap resize SIGWINCH
}

main() {
    tput -T "$TERM" sgr0 >/dev/null || return $?

    COLORS=$(tput colors)
    SGR0=$(tput sgr0)
    SGR_BOLD=$(tput bold)

    parse "$@" || return $?

    ((${#V[@]})) || V=(0)
    VN=${#V[@]}
    ((${#C[@]})) || C=(1 2 3 4 5 6 7 0)
    CN=${#C[@]}

    local i
    for ((i = 0; i < CN; i++)) {
        E[i]=$SGR0
        ((BOLD))    && E[i]+=$SGR_BOLD
        ((NOCOLOR)) || E[i]+=$(tput setaf ${C[i]})
    }

    local i j
    for ((i = 0; i < ${#sets[@]}; i++)) {
        for ((j = 0; j < 16; j++)) {
            SETS+=("${sets[i]:j:1}")
        }
    }
    unset i j

    init_screen
    init_pipes

    trap 'break 2' INT

    local i
    while REPLY=; do
        read -t 0.0$((1000 / f)) -n 1 2>/dev/null
        case "$REPLY" in
            P) ((s = s <  15 ? s + 1 : s));;
            O) ((s = s >   3 ? s - 1 : s));;
            F) ((f = f < 100 ? f + 1 : f));;
            D) ((f = f >  20 ? f - 1 : f));;
            B) ((BOLD = (BOLD + 1) % 2));;
            C) ((NOCOLOR = (NOCOLOR + 1) % 2));;
            K) ((KEEPCT = (KEEPCT + 1) % 2));;
            ?) break;;
        esac
        for ((i = 0; i < p; i++)); do
            ((l[i] % 2)) && ((x[i] += -l[i] + 2, 1)) || ((y[i] += l[i] - 1))

            ((!KEEPCT && (x[i] >= w || x[i] < 0 || y[i] >= h || y[i] < 0))) \
            && { c[i]=${E[CN * RANDOM / M]}; ((v[i] = V[VN * RANDOM / M])); }
            ((x[i] = (x[i] + w) % w,
              y[i] = (y[i] + h) % h))

            ((
                n[i] = s * RANDOM / M - 1,
                n[i] = n[i] >= 0 ? l[i] : l[i] + (2 * (RANDOM % 2) - 1),
                n[i] = (n[i] + 4) % 4
            ))

            printf '\e[%d;%dH%s%s'                      \
                   $((y[i] + 1)) $((x[i] + 1)) ${c[i]}  \
                   "${SETS[v[i] * 16 + l[i] * 4 + n[i]]}"
            # -_CP_print
            l[i]=${n[i]}
        done
        ((r > 0 && t * p >= r)) && tput reset && tput civis && t=0 || ((t++))
    done

    cleanup
}

[[ "$0" != "$BASH_SOURCE" ]] ||  main "$@"
